from pydantic import BaseModel, Field
from typing_extensions import TypedDict
from typing import Literal, List

class AgentState(TypedDict):
    """
    Represents the state of the agent during its operation.
    
    Attributes:
        question (str): The user's question or input.
        grades (List[str]): List of grades or scores for the question and documents.
        llm_output (str): The output generated by the language model.
        documents (List[str]): List of retrieved documents relevant to the question.
        on_topic (bool): Indicates whether the question is on-topic for the medical context.
    """
    question: str
    grades: List[str]
    llm_output: str
    documents: List[str]
    on_topic: bool

class MedicalContextCheck(BaseModel):
    """
    Checks whether a question is related to the medical context (e.g., medical terms, diagnosis, symptoms).
    
    Attributes:
        score (str): Indicates if the question is related to the medical context. 
                     Possible values: 'Yes' or 'No'.
    """
    score: Literal["Yes", "No"] = Field(
        default="No",
        description="Indicates if the question is related to the medical context. Possible values: 'Yes' or 'No'."
    )

class DocumentRelevanceCheck(BaseModel):
    """
    Checks whether the retrieved documents are relevant to the question.
    
    Attributes:
        score (str): Indicates if the documents are relevant to the question. 
                     Possible values: 'Yes' or 'No'.
    """
    score: Literal["Yes", "No"] = Field(
        default="No",
        description="Indicates if the documents are relevant to the question. Possible values: 'Yes' or 'No'."
    )